import { useEffect, useRef } from "react";
import Phaser from "phaser";
import { createSeedIcon } from "../gameFunctions/createSeedIcon";
import { GlobalVariables } from "../game/GlobalVariables";
import { createText } from "../gameFunctions/createText";
import { createGrounds } from "../gameFunctions/createGrounds";
import { loadAssets } from "../gameFunctions/loadassets";
import {createHouse} from '../gameFunctions/createHouse'
export default function PhaserGame() {
    const gameContainer = useRef(null);

    useEffect(() => {
        if (!gameContainer.current) return;

        const config = {
            type: Phaser.AUTO,
            width: 800,
            height: 600,
            parent: gameContainer.current,
            scene: {
                preload: preload,
                create: create,
                update: update,
            },
        };

        const game = new Phaser.Game(config);

        function preload() { loadAssets(this) }

        function create() {
            // Background
            this.add.image(400, 300, "background").setScale(1.5);

            // Toolbar background
            this.add.rectangle(400, 50, 800, 100, 0x777770).setDepth(10);

            // Seed selection toolbar
            for (let i = 0; i < GlobalVariables.seedCount; i++) {
                createSeedIcon(this, 100, 50);
            }
            const textObjects = createText(this);
            createHouse(this)
            // Handle Dragging
            this.input.on("drag", (pointer, gameObject, dragX, dragY) => {
                if (gameObject.texture.key === "ground") {
                    // Move ground
                    gameObject.x = dragX;
                    gameObject.y = dragY;

                } else {
                    // Move seed
                    gameObject.x = dragX;
                    gameObject.y = dragY;
                    gameObject.setAlpha(0.5);
                }
                console.log(gameObject.x, gameObject.y)
            });

            // Drop Zones (Multiple Grounds)
            const dropZones = [];
            createGrounds(this, dropZones);



            // Handle Drop
            this.input.on("dragend", (pointer, gameObject) => {

                for (const zone of dropZones) {
                    if (!zone.planted && Phaser.Geom.Rectangle.Contains(zone.dropZone.getBounds(), gameObject.x, gameObject.y)) {
                        if (gameObject.texture.key === "seed") {

                            this.sound.play("success");
                            this.tweens.add({
                                targets: gameObject, alpha: 0, scale: 0, duration: 500,
                                onComplete: () => gameObject.destroy(),
                            });

                            const plant = this.add.image(zone.dropZone.x, zone.dropZone.y - 10 - 20, "plant").setScale(0);

                            this.tweens.add({
                                targets: plant, scale: 0.065, alpha: 1,
                                duration: 700,
                            });
                            // Find the corresponding ground and remove it
                            const ground = zone.dropZone.associatedGround;
                            if (ground) {
                                this.tweens.add({
                                    targets: ground,
                                    alpha: 0,
                                    duration: 500,
                                    onComplete: () => ground.destroy(),
                                });
                            }


                            // Update Global Variables
                            GlobalVariables.seedCount--;
                            GlobalVariables.score += 10; // Example score increment

                            // Update the text UI
                            textObjects.updateSeedCount();
                            textObjects.updateScore();


                            zone.planted = true;

                            return;


                        }


                    }
                }
                GlobalVariables.seedCount--;


                // If dropped outside a valid zone, return to toolbar
                if (gameObject.texture.key === "seed") {
                    gameObject.x = gameObject.input.dragStartX;
                    gameObject.y = gameObject.input.dragStartY;
                    gameObject.setAlpha(1);
                    this.sound.play("fail");
                }

            }
            );

            // Save ground position after drag ends

        }

        function update() { }

        return () => {
            game.destroy(true);
        };
    }, []);

    return <div ref={gameContainer} className="w-full h-screen bg-black"></div>;
}
